<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>首页 on 随便写写</title>
    <link>http://crewgjx.github.io/</link>
    <description>Recent content in 首页 on 随便写写</description>
    <generator>Hugo -- 0.139.0</generator>
    <language>zh-CN</language>
    <atom:link href="http://crewgjx.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://crewgjx.github.io/pages/data-dog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://crewgjx.github.io/pages/data-dog/</guid>
      <description>&lt;h1 id=&#34;datadog&#34;&gt;datadog&lt;/h1&gt;
&lt;h2 id=&#34;功能&#34;&gt;功能&lt;/h2&gt;
&lt;h3 id=&#34;infrastructure-基础设施管理&#34;&gt;Infrastructure-基础设施管理&lt;/h3&gt;
&lt;h4 id=&#34;配置&#34;&gt;配置&lt;/h4&gt;
&lt;p&gt;下载对应平台的agent进行数据采集。支持以下平台：
&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230112110229.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;hostinfo-基本信息&#34;&gt;HostInfo-基本信息&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;平台：操作系统，架构，内核，发行版本。&lt;/li&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;内存&lt;/li&gt;
&lt;li&gt;网络信息：v4v6地址，mac地址&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;metrics-基础设施指标监控&#34;&gt;metrics-基础设施指标监控&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;system自身的metrics&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;host：&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230112104920.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;docker：&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230112104854.png&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关联到APM中已注册的服务。&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230112104726.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;container-docker容器监控&#34;&gt;container-docker容器监控&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;展示所有容器化的服务。
&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230112105913.png&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;process-进程监控&#34;&gt;process-进程监控&lt;/h4&gt;
&lt;p&gt;对服务器host所运行的进程进行监控。
&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230112105954.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;apm-服务监控&#34;&gt;APM-服务监控&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;展示当前所有服务的所属，可用性，性能。
&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230122162437.png&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;可用性：可与告警检测联动。查看服务可用性。
&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230122163342.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;以java web服务为例，可展示对其他服务的依赖关系。如对Mysql的依赖。
&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230122162705.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以java web服务为例，可进行接口性能的展示。
&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230122162840.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体还可进行接口时延的追踪。
&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230122163114.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230122194711.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;log-日志管理&#34;&gt;Log-日志管理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;以Java应用为例。通过在服务器上安装agent，并暴露日志文件的位置，可以通过端口通信，将日志内容发送至服务端。
&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230122160952.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同时，可以通过日志内容匹配等方式，设置日志的类型的级别。比如，在匹配到ERROR关键词时，将其标记为异常日志。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;npm-网络流量管理&#34;&gt;NPM-网络流量管理&lt;/h3&gt;
&lt;p&gt;trial版可以检测流量。
&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230122161343.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;monitor-告警管理&#34;&gt;Monitor-告警管理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;选择需要进行告警管理的类型，如服务器，服务，指标集etc.
&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230122160347.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;以metrics为例。选择需要进行告警检测的数据集，设置阈值和告警内容及通知人员。
&lt;img alt=&#34;Img&#34; loading=&#34;lazy&#34; src=&#34;http://crewgjx.github.io/pages/data-dog/FILES/index.md/img-20230122160635.png&#34;&gt;
也可进行告警方式，告警策略等的设置。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://crewgjx.github.io/pages/nginx/nginx%E4%BB%A3%E7%90%86udp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://crewgjx.github.io/pages/nginx/nginx%E4%BB%A3%E7%90%86udp/</guid>
      <description>&lt;h1 id=&#34;nginx代理udp&#34;&gt;nginx代理udp&lt;/h1&gt;
&lt;h2 id=&#34;起源&#34;&gt;起源&lt;/h2&gt;
&lt;p&gt;由于集群环境迁移，原集群中用于处理南向心跳报文的服务，需要迁移至新集群中。
但是由于南向网络无法与新集群连通，而原集群的网络与南向和新集群都可以打通。考虑在原集群中部署nginx服务，代理udp心跳报文至新集群。&lt;/p&gt;
&lt;h2 id=&#34;服务部署&#34;&gt;服务部署&lt;/h2&gt;
&lt;h3 id=&#34;方案10&#34;&gt;方案1.0&lt;/h3&gt;
&lt;p&gt;在原集群中部署一个&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;user  nginx;
worker_rlimit_nofile 65535;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

stream {
    log_format main &amp;#39;$remote_addr -&amp;gt; $upstream_addr =&amp;gt; [$time_local] - $status&amp;#39;;

    upstream forward {
        server 1.1.1.1:8080;
    }

    server {
        listen 8080 udp;
        access_log /var/log/forward.log main;
        proxy_pass forward;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;排障&#34;&gt;排障&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定位问题
刚开始服务运行正常。能正常代理UDP请求，且新集群的服务返回的udp报文也能正常传输到南向。
一段时间后，观测到sink，也即下游数据出现异常，推测可能是该心跳服务异常，故开始溯源日志。
溯源日志后发现nginx服务日志出现error，连接过多导致无法建立新的连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩容处理
增加connection数量至10240且将deployment扩容至10后仍无法解决问题，一段时间后继续出现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;方案20&#34;&gt;方案2.0&lt;/h2&gt;
&lt;p&gt;由于观察到日志中，udp报文的数量相较于实际，明显偏小。
考虑是否因为无连接，导致没有结束，无法记录日志。
在搜索后，发现可以添加proxy_responses 0，让nginx直接记录日志。
在更改配置文件后，发现问题更严重了。
原本是正常一段时间后，再出现问题。配置变更后，服务无法再正常运行。
南向上报的心跳报文可以记录到所有的转发，但是回程给南向的udp，无法观察到回程信息。&lt;/p&gt;
&lt;h2 id=&#34;再排障&#34;&gt;再排障&lt;/h2&gt;
&lt;p&gt;后经多次上网搜索，发现proxy_responses此字段，其实是nginx为udp代理做的虚拟会话设置。
当proxy_responses为默认值时，nginx为一个udp保留虚拟会话，因此，出现1.0时的连接无法释放，导致服务正常运行一段时间后，nginx代理会down。
当proxy_responses设置为0时，nginx会认为此虚拟会话无需保留，所以当回程udp报文再次回来时，nginx已经释放掉之前的虚拟会话，也就无法回程转发。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
